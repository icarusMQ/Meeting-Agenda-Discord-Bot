const { SlashCommandBuilder, PermissionFlagsBits, ButtonBuilder, ButtonStyle, ActionRowBuilder } = require('discord.js');
const { resetAgenda, resetSuggestions } = require('../utils/agenda');
const logger = require('../utils/logger');
const { handleAsync } = require('../utils/errorHandler');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('resetar')
    .setDescription('Resetar a pauta atual e salvar no hist√≥rico')
    .addBooleanOption(option =>
      option.setName('sugestoes')
        .setDescription('Resetar tamb√©m as sugest√µes pendentes?')
        .setRequired(false)),
  
  execute: handleAsync(async (interaction) => {
    // Only users with admin permissions can reset the agenda
    if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
      return interaction.reply({
        content: '‚ùå Voc√™ n√£o tem permiss√£o para resetar a pauta. Apenas administradores podem usar este comando.',
        ephemeral: true
      });
    }
    
    const resetSugs = interaction.options.getBoolean('sugestoes');
    const resetType = resetSugs ? 'completo (pauta e sugest√µes)' : 'parcial (apenas pauta)';
    
    // Criar bot√µes de confirma√ß√£o
    const confirmButton = new ButtonBuilder()
      .setCustomId('reset_confirm')
      .setLabel('Confirmar Reset')
      .setStyle(ButtonStyle.Danger);
      
    const cancelButton = new ButtonBuilder()
      .setCustomId('reset_cancel')
      .setLabel('Cancelar')
      .setStyle(ButtonStyle.Secondary);
      
    const row = new ActionRowBuilder()
      .addComponents(confirmButton, cancelButton);
    
    // Enviar mensagem com bot√µes de confirma√ß√£o
    const response = await interaction.reply({
      content: `‚ö†Ô∏è **Confirma√ß√£o de Reset**\n\nVoc√™ est√° prestes a realizar um reset ${resetType} da pauta atual.\nEsta a√ß√£o guardar√° a pauta atual no hist√≥rico e criar√° uma nova pauta vazia.\n\nVoc√™ tem certeza que deseja continuar?`,
      components: [row],
      ephemeral: true
    });
    
    // Coletor para resposta dos bot√µes
    try {
      const confirmation = await response.awaitMessageComponent({
        filter: i => i.user.id === interaction.user.id,
        time: 60000 // 1 minuto para responder
      });
      
      if (confirmation.customId === 'reset_confirm') {
        // Executar o reset
        resetAgenda();
        logger.info(`Pauta resetada manualmente por ${interaction.user.tag} (${interaction.user.id})`);
        
        if (resetSugs) {
          resetSuggestions();
          logger.info(`Sugest√µes resetadas manualmente por ${interaction.user.tag} (${interaction.user.id})`);
          
          await confirmation.update({
            content: '‚úÖ A pauta foi resetada com sucesso! Todas as sugest√µes pendentes tamb√©m foram removidas.',
            components: [],
            ephemeral: true
          });
          
          // Enviar an√∫ncio no canal
          await interaction.channel.send({
            content: `üì¢ **Pauta Resetada**\n\n${interaction.user.toString()} realizou um reset completo da pauta. Uma nova pauta est√° dispon√≠vel para sugest√µes!`
          });
        } else {
          await confirmation.update({
            content: '‚úÖ A pauta foi resetada com sucesso! Sugest√µes pendentes foram mantidas.',
            components: [],
            ephemeral: true
          });
          
          // Enviar an√∫ncio no canal
          await interaction.channel.send({
            content: `üì¢ **Pauta Resetada**\n\n${interaction.user.toString()} realizou um reset da pauta. Uma nova pauta est√° dispon√≠vel, mantendo as sugest√µes pendentes!`
          });
        }
      } else {
        // Cancelado
        await confirmation.update({
          content: '‚ùå Opera√ß√£o de reset cancelada.',
          components: [],
          ephemeral: true
        });
      }
    } catch (error) {
      // Tempo expirado
      await interaction.editReply({
        content: '‚è±Ô∏è O tempo para confirma√ß√£o expirou. A opera√ß√£o de reset foi cancelada.',
        components: [],
        ephemeral: true
      });
    }
  })
};