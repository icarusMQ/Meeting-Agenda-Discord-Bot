const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const { getAuthorizedUsers, isUserAuthorized } = require('../utils/agenda');
const logger = require('../utils/logger');
const { handleAsync } = require('../utils/errorHandler');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('autorizados')
    .setDescription('Lista os usu√°rios autorizados a aprovar sugest√µes'),
  
  execute: handleAsync(async (interaction) => {
    const guildId = interaction.guild.id;
    
    // Get a list of authorized users for this guild
    const authorizedUsers = getAuthorizedUsers(guildId);
    
    // Create an embed to display the authorized users
    const embed = new EmbedBuilder()
      .setColor(0x0099FF)
      .setTitle('üëë Usu√°rios Autorizados')
      .setDescription('Os seguintes usu√°rios est√£o autorizados a aprovar sugest√µes de pauta:')
      .setTimestamp();
    
    if (authorizedUsers.length === 0) {
      embed.setDescription('N√£o h√° usu√°rios explicitamente autorizados no momento.\n\nAdministradores e usu√°rios com o papel especificado em LEADER_ROLE_ID ou AUTHORIZED_ROLE_ID podem aprovar sugest√µes automaticamente.');
    } else {
      authorizedUsers.forEach(user => {
        const addedDate = new Date(user.addedAt);
        const formattedDate = addedDate.toLocaleDateString('pt-BR');
        
        embed.addFields({ 
          name: user.username, 
          value: `ID: ${user.id}\nAutorizado desde: ${formattedDate}`,
          inline: true
        });
      });
    }
    
    // Add information about the requester
    const isUserAuth = isUserAuthorized(guildId, interaction.user.id);
    const hasLeaderRole = interaction.member.roles.cache.has(process.env.LEADER_ROLE_ID);
    const hasAuthorizedRole = interaction.member.roles.cache.has(process.env.AUTHORIZED_ROLE_ID);
    const isAdmin = interaction.member.permissions.has('Administrator');
    
    let userStatus = "‚ùå Voc√™ **n√£o** est√° autorizado a aprovar sugest√µes.";
    
    if (isUserAuth) {
      userStatus = "‚úÖ Voc√™ est√° **explicitamente autorizado** a aprovar sugest√µes.";
    } else if (isAdmin) {
      userStatus = "‚úÖ Voc√™ est√° autorizado a aprovar sugest√µes por ser um **Administrador**.";
    } else if (hasLeaderRole) {
      userStatus = `‚úÖ Voc√™ est√° autorizado a aprovar sugest√µes por ter o papel de **L√≠der** (ID: ${process.env.LEADER_ROLE_ID}).`;
    } else if (hasAuthorizedRole) {
      userStatus = `‚úÖ Voc√™ est√° autorizado a aprovar sugest√µes por ter o papel **Autorizado** (ID: ${process.env.AUTHORIZED_ROLE_ID}).`;
    }
    
    embed.setFooter({ text: userStatus });
    
    await interaction.reply({
      embeds: [embed],
      ephemeral: false
    });
    
    logger.info(`Guild ${guildId}: Lista de usu√°rios autorizados visualizada por ${interaction.user.tag} (${interaction.user.id})`);
  })
};